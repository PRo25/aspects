{"version":3,"file":"pro-aspects.js","sourceRoot":"","sources":["../Core/PointCuts/MemberMatchPredicate.ts","../Core/Advices/Advice.ts","../Core/JoinPoints/JoinPointTypes.ts","../Core/PointCuts/PointCut.ts","../Core/JoinPoints/MethodExecutionJoinPoint.ts","../Core/Advices/AfterMethodExecutionAdvice.ts","../Core/Advices/BeforeMethodExecutionAdvice.ts","../Core/Advices/OnErrorThrownInMethodExecutionAdvice.ts","../Core/Aspect.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;QAAmF,CAAC;;;;;;;;;;YCApF;gBAII,gBAAmB,MAAgB;oBAE/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACzB,CAAC;gBAGL,aAAC;YAAD,CAAC,AAVD,IAUC;;QAAA,CAAC;;;;;;;;;;YCVF,WAAY,cAAc;gBAEtB,yEAAe,CAAA;YACnB,CAAC,EAHW,cAAc,KAAd,cAAc,QAGzB;;QACD,CAAC;;;;;;;;;;;;;;YCAD;gBAOI,kBAAmB,cAAoC,EAAE,MAAc,EAAE,aAA6B;oBAElG,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;oBACrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;gBACvC,CAAC;gBAEM,0BAAO,GAAd,UAAe,MAAc,EAAE,UAAkB;oBAE7C,IAAI,OAAO,GAAY,KAAK,CAAC;oBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,+BAAc,CAAC,eAAe,CAAC,CACzD,CAAC;wBACG,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,YAAY,QAAQ;+BACzC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;oBACnD,CAAC;oBACD,MAAM,CAAC,OAAO,CAAC;gBACnB,CAAC;gBACL,eAAC;YAAD,CAAC,AAxBD,IAwBC;;QACD,CAAC;;;;;;;;;;;;;;YC3BD;gBAQI,kCAAmB,MAAc,EAAE,UAAkB,EAAE,eAA4B;oBANnE,SAAI,GAAmB,+BAAc,CAAC,eAAe,CAAC;oBAQlE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;oBACrB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;oBAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,IAAI,EAAE,CAAC;gBACjD,CAAC;gBACL,+BAAC;YAAD,CAAC,AAdD,IAcC;;QAAA,CAAC;;;;;;;;;;;;;;;;;YCbF;gBAAgD,8CAAM;gBAElD,oCAAmB,MAAgB;2BAE/B,kBAAM,MAAM,CAAC;gBACjB,CAAC;gBAEM,wDAAmB,GAA1B,UAA2B,MAAc,EAAE,UAAkB;oBAEzD,IAAI,UAAU,GAA+B,IAAI,CAAC;oBAClD,IAAI,cAAc,GAAa,MAAM,CAAC,UAAU,CAAC,CAAC;oBAClD,IAAI,aAAa,GAAa;wBAAS,cAAmB;6BAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;4BAAnB,yBAAmB;;wBAEtD,IAAI,SAAS,GAAG,IAAI,mDAAwB,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBACrE,SAAS,CAAC,YAAY,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;wBAC/E,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBAC7B,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC;oBAClC,CAAC,CAAC;oBACF,MAAM,CAAC,aAAa,CAAC;gBACzB,CAAC;gBACL,iCAAC;YAAD,CAAC,AApBD,CAAgD,eAAM,GAoBrD;;QAAA,CAAC;;;;;;;;;;;;;;;;;YCpBF;gBAAiD,+CAAM;gBAEnD,qCAAmB,MAAgB;2BAE/B,kBAAM,MAAM,CAAC;gBACjB,CAAC;gBAEM,yDAAmB,GAA1B,UAA2B,MAAc,EAAE,UAAkB;oBAEzD,IAAI,UAAU,GAAgC,IAAI,CAAC;oBACnD,IAAI,cAAc,GAAa,MAAM,CAAC,UAAU,CAAC,CAAC;oBAClD,IAAI,aAAa,GAAa;wBAAS,cAAmB;6BAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;4BAAnB,yBAAmB;;wBAEtD,IAAI,SAAS,GAAG,IAAI,mDAAwB,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBACrE,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;wBAC7B,SAAS,CAAC,YAAY,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;wBAC/E,MAAM,CAAC,SAAS,CAAC,YAAY,CAAC;oBAClC,CAAC,CAAC;oBACF,MAAM,CAAC,aAAa,CAAC;gBACzB,CAAC;gBACL,kCAAC;YAAD,CAAC,AApBD,CAAiD,eAAM,GAoBtD;;QAAA,CAAC;;;;;;;;;;;;;;;;;YCpBF;gBAA0D,wDAAM;gBAE5D,8CAAmB,MAAgB;2BAE/B,kBAAM,MAAM,CAAC;gBACjB,CAAC;gBAEM,kEAAmB,GAA1B,UAA2B,MAAc,EAAE,UAAkB;oBAEzD,IAAI,UAAU,GAAyC,IAAI,CAAC;oBAC5D,IAAI,cAAc,GAAa,MAAM,CAAC,UAAU,CAAC,CAAC;oBAClD,IAAI,aAAa,GAAa;wBAAS,cAAmB;6BAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;4BAAnB,yBAAmB;;wBAEtD,IAAI,SAAS,GAAG,IAAI,mDAAwB,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;wBACrE,IACA,CAAC;4BACG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,eAAe,CAAC,CAAC;wBACjE,CAAC;wBACD,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,CAAC;4BACG,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;wBACxC,CAAC;oBACL,CAAC,CAAC;oBACF,MAAM,CAAC,aAAa,CAAC;gBACzB,CAAC;gBACL,2CAAC;YAAD,CAAC,AAzBD,CAA0D,eAAM,GAyB/D;;QAAA,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;YCpBF;gBAII;oBAFQ,cAAS,GAAoB,EAAE,CAAC;oBAIpC,IAAI,CAAC,KAAK,EAAE,CAAC;gBACjB,CAAC;gBAIS,+CAA8B,GAAxC,UAAyC,oBAA8B,EACnE,oBAAiD;oBAAjD,qCAAA,EAAA,2BAAiD;oBAEjD,IAAI,MAAM,GAAW,IAAI,yDAA2B,CAAC,oBAAoB,CAAC,CAAC;oBAC3E,IAAI,CAAC,gCAAgC,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;gBACxE,CAAC;gBAEO,iDAAgC,GAAxC,UAAyC,MAAc,EAAE,oBAA0C;oBAE/F,oBAAoB,GAAG,IAAI,CAAC,gCAAgC,CAAC,oBAAoB,CAAC,CAAC;oBACnF,IAAI,QAAQ,GAAa,IAAI,mBAAQ,CAAC,oBAAoB,EAAE,MAAM,EAAE,+BAAc,CAAC,eAAe,CAAC,CAAC;oBACpG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBAClC,CAAC;gBAEO,iDAAgC,GAAxC,UAAyC,oBAA0C;oBAE/E,EAAE,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC,CACjC,CAAC;wBACG,oBAAoB,GAAG,UAAC,MAAM,EAAE,UAAU,IAAO,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpE,CAAC;oBACD,MAAM,CAAC,oBAAoB,CAAC;gBAChC,CAAC;gBAES,8CAA6B,GAAvC,UAAwC,oBAA8B,EAClE,oBAAiD;oBAAjD,qCAAA,EAAA,2BAAiD;oBAEjD,IAAI,MAAM,GAAW,IAAI,uDAA0B,CAAC,oBAAoB,CAAC,CAAC;oBAC1E,IAAI,CAAC,gCAAgC,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;gBACxE,CAAC;gBAES,wDAAuC,GAAjD,UAAkD,oBAA8B,EAC5E,oBAAiD;oBAAjD,qCAAA,EAAA,2BAAiD;oBAEjD,IAAI,MAAM,GAAW,IAAI,2EAAoC,CAAC,oBAAoB,CAAC,CAAC;oBACpF,IAAI,CAAC,gCAAgC,CAAC,MAAM,EAAE,oBAAoB,CAAC,CAAC;gBACxE,CAAC;gBAEM,sBAAK,GAAZ,UAAa,MAAc;oBAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAC1B,CAAC;wBACG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;oBAC9B,CAAC;gBACL,CAAC;gBAIO,6BAAY,GAApB,UAAqB,MAAc;oBAE/B,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,MAAM,CAAC,CAC9B,CAAC;wBACG,EAAE,CAAC,CAAC,UAAU,IAAI,aAAa,CAAC,CAChC,CAAC;4BACG,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;wBACnD,CAAC;oBACL,CAAC;gBACL,CAAC;gBAEO,sCAAqB,GAA7B,UAA8B,MAAc,EAAE,UAAkB;oBAE5D,IAAI,eAAe,GACf,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,UAAU,CAAC,EAA7B,CAA6B,CAAC,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,EAAR,CAAQ,CAAC,CAAC;oBACjF,EAAE,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAC/B,CAAC;wBACG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,eAAe,CAAC,CAAC;oBAC1D,CAAC;gBACL,CAAC;gBAEO,4BAAW,GAAnB,UAAoB,MAAc,EAAE,UAAkB,EAAE,eAA8B;oBAElF,GAAG,CAAC,CAAe,UAAe,EAAf,mCAAe,EAAf,6BAAe,EAAf,IAAe;wBAA7B,IAAI,MAAM,wBAAA;wBAEX,MAAM,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC,mBAAmB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;qBACvE;gBACL,CAAC;gBACL,aAAC;YAAD,CAAC,AAtFD,IAsFC;;QAAA,CAAC","sourcesContent":["export type MemberMatchPredicate = (target: Object, memberName: string) => boolean;","export abstract class Advice\r\n{\r\n    protected readonly Action: Function;\r\n\r\n    public constructor(action: Function)\r\n    {\r\n        this.Action = action;\r\n    }\r\n\r\n    public abstract CreateAdvisedMember(target: Object, memberName: string): Function;\r\n}","export enum JoinPointTypes\r\n{\r\n    MethodExecution\r\n}\r\n","import { Advice } from \"../Advices/Advice\";\r\nimport { JoinPointTypes } from \"../JoinPoints/JoinPointTypes\";\r\nimport { MemberMatchPredicate } from \"./MemberMatchPredicate\";\r\n\r\nexport class PointCut\r\n{\r\n    protected readonly MatchPredicate: MemberMatchPredicate;\r\n\r\n    public readonly Advice: Advice;\r\n    public readonly JoinPointType: JoinPointTypes;\r\n\r\n    public constructor(matchPredicate: MemberMatchPredicate, advice: Advice, joinPointType: JoinPointTypes)\r\n    {\r\n        this.MatchPredicate = matchPredicate;\r\n        this.Advice = advice;\r\n        this.JoinPointType = joinPointType;\r\n    }\r\n\r\n    public IsMatch(target: Object, memberName: string): boolean\r\n    {\r\n        let isMatch: boolean = false;\r\n        if (this.JoinPointType == JoinPointTypes.MethodExecution)\r\n        {\r\n            isMatch = target[memberName] instanceof Function\r\n                && this.MatchPredicate(target, memberName);\r\n        }\r\n        return isMatch;\r\n    }\r\n}\r\n","import { JoinPointTypes } from \"./JoinPointTypes\";\r\n\r\nexport class MethodExecutionJoinPoint\r\n{\r\n    public readonly Type: JoinPointTypes = JoinPointTypes.MethodExecution;\r\n    public readonly Target: Object;\r\n    public readonly MethodName: string;\r\n    public readonly MethodArguments: Array<any>;\r\n    public MethodResult: any;\r\n\r\n    public constructor(target: Object, methodName: string, methodArguments?: Array<any>)\r\n    {\r\n        this.Target = target;\r\n        this.MethodName = methodName;\r\n        this.MethodArguments = methodArguments || [];\r\n    }\r\n}","import { Advice } from \"./Advice\";\r\nimport { MethodExecutionJoinPoint } from \"../JoinPoints/MethodExecutionJoinPoint\";\r\n\r\nexport class AfterMethodExecutionAdvice extends Advice\r\n{\r\n    public constructor(action: Function)\r\n    {\r\n        super(action);\r\n    }\r\n\r\n    public CreateAdvisedMember(target: Object, methodName: string): Function\r\n    {\r\n        let thisAdvice: AfterMethodExecutionAdvice = this;\r\n        let originalMethod: Function = target[methodName];\r\n        let advisedMethod: Function = function(...args: Array<any>)\r\n        {\r\n            let joinPoint = new MethodExecutionJoinPoint(this, methodName, args);\r\n            joinPoint.MethodResult = originalMethod.apply(this, joinPoint.MethodArguments);\r\n            thisAdvice.Action(joinPoint);\r\n            return joinPoint.MethodResult;\r\n        };\r\n        return advisedMethod;\r\n    }\r\n}","import { Advice } from \"./Advice\";\r\nimport { MethodExecutionJoinPoint } from \"../JoinPoints/MethodExecutionJoinPoint\";\r\n\r\nexport class BeforeMethodExecutionAdvice extends Advice\r\n{\r\n    public constructor(action: Function)\r\n    {\r\n        super(action);\r\n    }\r\n\r\n    public CreateAdvisedMember(target: Object, methodName: string): Function\r\n    {\r\n        let thisAdvice: BeforeMethodExecutionAdvice = this;\r\n        let originalMethod: Function = target[methodName];\r\n        let advisedMethod: Function = function(...args: Array<any>)\r\n        {\r\n            let joinPoint = new MethodExecutionJoinPoint(this, methodName, args);\r\n            thisAdvice.Action(joinPoint);\r\n            joinPoint.MethodResult = originalMethod.apply(this, joinPoint.MethodArguments);\r\n            return joinPoint.MethodResult;\r\n        };\r\n        return advisedMethod;\r\n    }\r\n}","import { Advice } from \"./Advice\";\r\nimport { MethodExecutionJoinPoint } from \"../JoinPoints/MethodExecutionJoinPoint\";\r\n\r\nexport class OnErrorThrownInMethodExecutionAdvice extends Advice\r\n{\r\n    public constructor(action: Function)\r\n    {\r\n        super(action);\r\n    }\r\n\r\n    public CreateAdvisedMember(target: Object, methodName: string): Function\r\n    {\r\n        let thisAdvice: OnErrorThrownInMethodExecutionAdvice = this;\r\n        let originalMethod: Function = target[methodName];\r\n        let advisedMethod: Function = function(...args: Array<any>)\r\n        {\r\n            let joinPoint = new MethodExecutionJoinPoint(this, methodName, args);\r\n            try\r\n            {\r\n                return originalMethod.apply(this, joinPoint.MethodArguments);\r\n            }\r\n            catch (error)\r\n            {\r\n                thisAdvice.Action(error, joinPoint);\r\n            }\r\n        };\r\n        return advisedMethod;\r\n    }\r\n}","import { MemberMatchPredicate } from \"./PointCuts/MemberMatchPredicate\";\r\nimport { PointCut } from \"./PointCuts/PointCut\";\r\nimport { Advice } from \"./Advices/Advice\";\r\nimport { AfterMethodExecutionAdvice } from \"./Advices/AfterMethodExecutionAdvice\";\r\nimport { BeforeMethodExecutionAdvice } from \"./Advices/BeforeMethodExecutionAdvice\";\r\nimport { OnErrorThrownInMethodExecutionAdvice } from \"./Advices/OnErrorThrownInMethodExecutionAdvice\";\r\nimport { JoinPointTypes } from \"./JoinPoints/JoinPointTypes\";\r\n\r\nexport abstract class Aspect\r\n{\r\n    private pointCuts: Array<PointCut> = [];\r\n\r\n    public constructor()\r\n    {\r\n        this.Setup();\r\n    }\r\n\r\n    protected abstract Setup(): void;\r\n\r\n    protected InterceptBeforeMethodExecution(onInterceptionAction: Function,\r\n        memberMatchPredicate: MemberMatchPredicate = null): void\r\n    {\r\n        let advice: Advice = new BeforeMethodExecutionAdvice(onInterceptionAction);\r\n        this.AddNewPointCutForMethodExecution(advice, memberMatchPredicate);\r\n    }\r\n\r\n    private AddNewPointCutForMethodExecution(advice: Advice, memberMatchPredicate: MemberMatchPredicate): void\r\n    {\r\n        memberMatchPredicate = this.GetMemberMatchPredicateOrDefault(memberMatchPredicate);\r\n        let pointCut: PointCut = new PointCut(memberMatchPredicate, advice, JoinPointTypes.MethodExecution);\r\n        this.pointCuts.push(pointCut);\r\n    }\r\n\r\n    private GetMemberMatchPredicateOrDefault(memberMatchPredicate: MemberMatchPredicate): MemberMatchPredicate\r\n    {\r\n        if (memberMatchPredicate == null)\r\n        {\r\n            memberMatchPredicate = (target, memberName) => { return true; };\r\n        }\r\n        return memberMatchPredicate;\r\n    }\r\n\r\n    protected InterceptAfterMethodExecution(onInterceptionAction: Function,\r\n        memberMatchPredicate: MemberMatchPredicate = null): void\r\n    {\r\n        let advice: Advice = new AfterMethodExecutionAdvice(onInterceptionAction);\r\n        this.AddNewPointCutForMethodExecution(advice, memberMatchPredicate);\r\n    }\r\n\r\n    protected InterceptOnErrorThrownInMethodExecution(onInterceptionAction: Function,\r\n        memberMatchPredicate: MemberMatchPredicate = null): void\r\n    {\r\n        let advice: Advice = new OnErrorThrownInMethodExecutionAdvice(onInterceptionAction);\r\n        this.AddNewPointCutForMethodExecution(advice, memberMatchPredicate);\r\n    }\r\n\r\n    public Weave(target: Object): void\r\n    {\r\n        if (this.CanWeave(target))\r\n        {\r\n            this.WeaveMembers(target);\r\n        }\r\n    }\r\n\r\n    protected abstract CanWeave(target: Object): boolean;\r\n\r\n    private WeaveMembers(target: Object): void\r\n    {\r\n        for (let memberName in target)\r\n        {\r\n            if (memberName != \"constructor\")\r\n            {\r\n                this.WeaveMemberIfAnyMatch(target, memberName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private WeaveMemberIfAnyMatch(target: Object, memberName: string): void\r\n    {\r\n        let matchingAdvices: Array<Advice> =\r\n            this.pointCuts.filter(p => p.IsMatch(target, memberName)).map(p => p.Advice);\r\n        if (matchingAdvices.length > 0)\r\n        {\r\n            this.WeaveMember(target, memberName, matchingAdvices);\r\n        }\r\n    }\r\n\r\n    private WeaveMember(target: Object, memberName: string, matchingAdvices: Array<Advice>): void\r\n    {\r\n        for (let advice of matchingAdvices)\r\n        {\r\n            target[memberName] = advice.CreateAdvisedMember(target, memberName);\r\n        }\r\n    }\r\n}"]}